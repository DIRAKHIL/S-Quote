name: Quality Check

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run quality checks daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  code-analysis:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        
    - name: Run automated code analysis
      run: |
        python3 analyze-issues.py
        
    - name: Generate quality report
      run: |
        echo "# Quality Check Report" > quality-report.md
        echo "" >> quality-report.md
        echo "Generated on: $(date)" >> quality-report.md
        echo "" >> quality-report.md
        
        # Extract summary from analysis
        if [ -f "ANALYSIS_REPORT.json" ]; then
          python3 -c "
          import json
          with open('ANALYSIS_REPORT.json', 'r') as f:
              data = json.load(f)
          
          total = data.get('total_issues', 0)
          by_severity = data.get('by_severity', {})
          
          print(f'## Summary')
          print(f'')
          print(f'Total Issues: **{total}**')
          print(f'')
          print(f'### By Severity')
          for severity in ['critical', 'high', 'medium', 'low']:
              count = by_severity.get(severity, 0)
              if count > 0:
                  print(f'- {severity.title()}: {count}')
          " >> quality-report.md
        fi
        
    - name: Check quality gates
      id: quality-check
      run: |
        if [ -f "ANALYSIS_REPORT.json" ]; then
          python3 -c "
          import json
          import sys
          import os
          
          with open('ANALYSIS_REPORT.json', 'r') as f:
              data = json.load(f)
          
          critical = data.get('by_severity', {}).get('critical', 0)
          high = data.get('by_severity', {}).get('high', 0)
          total = data.get('total_issues', 0)
          
          # Set output variables
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f'critical={critical}\n')
              f.write(f'high={high}\n')
              f.write(f'total={total}\n')
          
          # Quality gates
          if critical > 0:
              print('❌ FAIL: Critical issues found')
              sys.exit(1)
          elif high > 20:
              print('⚠️ WARNING: Too many high priority issues')
              sys.exit(0)
          else:
              print('✅ PASS: Quality gates passed')
              sys.exit(0)
          "
        else
          echo "No analysis report found"
          exit 1
        fi
        
    - name: Upload analysis artifacts
      uses: actions/upload-artifact@v4
      with:
        name: quality-analysis-${{ github.sha }}
        path: |
          ANALYSIS_REPORT.md
          ANALYSIS_REPORT.json
          quality-report.md
        retention-days: 30
        
    - name: Comment on PR (if applicable)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          if (fs.existsSync('quality-report.md')) {
            const report = fs.readFileSync('quality-report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🔍 Automated Quality Check\n\n${report}\n\n---\n*This comment was automatically generated by the quality check workflow.*`
            });
          }

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run security scan
      run: |
        echo "# Security Scan Report" > security-report.md
        echo "" >> security-report.md
        echo "Generated on: $(date)" >> security-report.md
        echo "" >> security-report.md
        
        # Check for common security issues
        echo "## Findings" >> security-report.md
        echo "" >> security-report.md
        
        # Check for hardcoded secrets
        if grep -r "password\|secret\|key\|token" --include="*.swift" . | grep -v "// " | head -5; then
          echo "⚠️ Potential hardcoded secrets found" >> security-report.md
        else
          echo "✅ No obvious hardcoded secrets found" >> security-report.md
        fi
        
        # Check for force unwrapping
        force_unwrap_count=$(grep -r "!" --include="*.swift" . | grep -v "//" | wc -l || echo "0")
        echo "- Force unwrapping instances: $force_unwrap_count" >> security-report.md
        
        # Check entitlements
        if [ -f "S Quote/S_Quote.entitlements" ]; then
          echo "✅ Entitlements file found" >> security-report.md
        else
          echo "⚠️ No entitlements file found" >> security-report.md
        fi
        
    - name: Upload security report
      uses: actions/upload-artifact@v4
      with:
        name: security-scan-${{ github.sha }}
        path: security-report.md
        retention-days: 30

  documentation-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check documentation
      run: |
        echo "# Documentation Check" > doc-report.md
        echo "" >> doc-report.md
        echo "Generated on: $(date)" >> doc-report.md
        echo "" >> doc-report.md
        
        # Check for required files
        required_files=("README.md" "PROJECT_SUMMARY.md" "GITHUB_SETUP.md")
        
        echo "## Required Documentation" >> doc-report.md
        for file in "${required_files[@]}"; do
          if [ -f "$file" ]; then
            echo "✅ $file" >> doc-report.md
          else
            echo "❌ $file (missing)" >> doc-report.md
          fi
        done
        
        # Check README completeness
        if [ -f "README.md" ]; then
          echo "" >> doc-report.md
          echo "## README.md Analysis" >> doc-report.md
          
          word_count=$(wc -w < README.md)
          echo "- Word count: $word_count" >> doc-report.md
          
          if grep -q "Installation" README.md; then
            echo "✅ Installation instructions found" >> doc-report.md
          else
            echo "❌ Installation instructions missing" >> doc-report.md
          fi
          
          if grep -q "Usage" README.md || grep -q "Features" README.md; then
            echo "✅ Usage/Features section found" >> doc-report.md
          else
            echo "❌ Usage/Features section missing" >> doc-report.md
          fi
        fi
        
    - name: Upload documentation report
      uses: actions/upload-artifact@v4
      with:
        name: documentation-check-${{ github.sha }}
        path: doc-report.md
        retention-days: 30